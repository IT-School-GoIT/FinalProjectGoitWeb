version: '3.8'

services:
  postgres:
    image: postgres
    environment:
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
      POSTGRES_DB: ${POSTGRES_DB:-mydatabase_$(date +%Y%m%d)}  # Генерація нового імені бази даних з поточною датою
    ports:
      - "5433:5432"
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - mynetwork

  web:
    build: .
    command: >
      sh -c "python manage.py migrate && python manage.py runserver 0.0.0.0:8000"
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    depends_on:
      - postgres
    environment:
      - DATABASE_URL=postgres://myuser:mypassword@postgres:5432/${POSTGRES_DB:-mydatabase_$(date +%Y%m%d)}  # Підставляємо те саме ім'я бази даних для Django
      - DEBUG=True
      - ALLOWED_HOSTS=*
    networks:
      - mynetwork

networks:
  mynetwork:











# version: '3.8'

# services:
#   postgres:
#     image: postgres
#     environment:
#       POSTGRES_USER: myuser
#       POSTGRES_PASSWORD: mypassword
#       POSTGRES_DB: mydatabase
#     ports:
#       - "5433:5432"
#     volumes:
#       - ./init.sql:/docker-entrypoint-initdb.d/init.sql
#     networks:
#       - mynetwork


#   web:
#     build: .
#     command: >
#       sh -c "wait-for-it postgres:5432 -- python manage.py migrate && python manage.py runserver 0.0.0.0:8000"
#     volumes:
#       - .:/code
#     ports:
#       - "8000:8000"
#     depends_on:
#       - postgres
#     environment:
#       - DATABASE_URL=postgres://myuser:mypassword@postgres:5432/mydatabase
#       - DEBUG=True
#       - ALLOWED_HOSTS=*
#     networks:
#       - mynetwork

# networks:
#   mynetwork:

# services:
#   postgres:
#     image: postgres
#     environment:
#       POSTGRES_PASSWORD: ${DB_PASSWORD}
#       POSTGRES_DB: ${DB_NAME}
#     ports:
#       - "5432:5432"
#     volumes:
#       - ./db:/var/lib/postgresql/data
  
  # webapp:
  #   restart: always
  #   build:
  #     context: ./
  #   ports: 
  #     - "8000:8000"
  #   depends_on:
  #     - postgres
  #   # command: ["python", "manage.py", "runserver", "0.0.0.0:8000"]
  #   # FOR DOCKER
  #   # command: ["bash", "-c", "sleep 7 && python manage.py migrate && python fill_db.py && python manage.py runserver 0.0.0.0:8000"]
  #   command: ["bash", "-c", "sleep 30 && python manage.py migrate && python manage.py runserver 0.0.0.0:8000"]


  # redis:
  #   image: redis
  #   ports:
  #     - "6379:6379"
  #   restart: always
  #   # volumes:
  #   #   - ./redis/redis_db:/data

  # worker:
  #   restart: always
  #   build:
  #     context: ./
  #   depends_on:
  #     - webapp
  #   # FOR DOCKER
  #   command: celery -A eshop worker -l info
  #   # command: celery -A eshop worker -l info -P eventlet

  # flower:
  #   build:
  #     context: ./
  #   restart: always
  #   depends_on:
  #     - worker
  #   ports: 
  #     - "5555:5555"
  #   # command: celery -A eshop flower -l info -P eventlet
  #   # FOR DOCKER
  #   command: celery -A eshop flower -l info --persistent=True

  # beat:
  #   restart: always
  #   build:
  #     context: ./
  #   depends_on:
  #     - flower
  #   command: celery -A eshop beat -l info